@mixin sr-only() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  font-size: 1.6rem;
}

//converted from Bootstrap LESS mixin #gradient > vertical
@mixin vertical-gradient($start-color: #555, $end-color: #333, $start-percent: 0%, $end-percent: 100%) {
    background: $start-color;
    background-image: -webkit-linear-gradint(top, $start-color $start-percent, $end-color $end-percent);  // Safari 5.1-6, Chrome 10+
    background-image: -o-linear-gradient(top, $start-color $start-percent, $end-color $end-percent);  // Opera 12
    background-image: linear-gradient(to bottom, $start-color $start-percent, $end-color $end-percent); // Standard, IE10, Firefox 16+, Opera 12.10+, Safari 7+, Chrome 26+
    background-repeat: repeat-x;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($start-color)}', endColorstr='#{ie-hex-str($end-color)}', GradientType=0); // IE9 and down
}

@mixin vendor-prefix($name, $argument...) {
  -webkit-#{$name}: #{$argument};
  -ms-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  -o-#{$name}: #{$argument};
  #{$name}: #{$argument};
}

@mixin box-shadow($shadows...) {
  -moz-box-shadow: $shadows;
  -webkit-box-shadow: $shadows;
          box-shadow: $shadows;
}

@mixin fa($icon) {
    @extend .fa;
    @extend .fa-#{$icon};
}

@mixin hover-bg($bg, $fg:null, $trans:true) {
  @at-root html.no-touch &:hover, html.touch &:active {
    background: $bg;
    @if $fg {
      color: $fg;
    }
    @content;
  }
  @if $trans {
    @include vendor-prefix(transition, all 0.2s cubic-bezier(0, 0.5, 0.25, 1));
  }
}

@mixin object-fit-poly($fitcommand) {
  object-fit: $fitcommand;
  font-family: 'object-fit: #{$fitcommand};';
}

@mixin ie11() {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content;
  }
}

// NOTE: will center inside the nearest ancestor with position: relative set
@mixin absolutecenter($offset:0%) {
  position: absolute;
  top: 50%+$offset;
  left: 50%;
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
}

@mixin verticalcenter($offset:0%) {
  position: absolute;
  top: 50%+$offset;
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
}

@mixin absolutefill() {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

// NOTE: requires you to set css class of .wide or .tall on the element you include this on,
// depending on whether the image is wider than the element or taller than the element
// javascript can help with this or if you have image dimensions during html render you can
// do it there
@mixin coverimage() {
  &.wide img { height: 100.5%; }
  &.tall img { width: 100.5%; }
  img {
    display: block;
    @include absolutecenter();
    width: auto;
    height: auto;
  }
}

@mixin fontface ($familyname, $fontstyle, $fontweight, $path, $extensions: woff2 woff ttf) {
  $src: null;
  $validExtensions: (ttf, woff, woff2);
  @each $ext in $extensions {
    @if index($validExtensions, $ext) {
      $format: if($ext == 'ttf', truetype, $ext);
      $src: append($src, url(quote($path + "." + $ext)) format(quote($format)), comma);
    }
  }

  @font-face {
    font-family: quote($familyname);
    font-style: $fontstyle;
    font-weight: $fontweight;
    src: $src;
  }
}